#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2022 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.9.0
# Product:      scd30
# Version:      None
#

import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_scd30.device import Scd30Device

with LinuxI2cTransceiver('/dev/i2c-0') as i2c_transceiver:
    channel = I2cChannel(I2cConnection(i2c_transceiver),
                         slave_address=0x61,
                         crc=CrcCalculator(8, 0x31, 0xff, 0x0))
    sensor = Scd30Device(channel)
    try:
        sensor.stop_periodic_measurement()
        sensor.soft_reset()
        time.sleep(2.0)
    except BaseException:
        ...

    (major, minor) = sensor.read_firmware_version()
    print(f"firmware version major: {major}; minor: {minor};")
    
    autocal_status = sensor.get_auto_calibration_status()
    print(f"Autocalibration Status : {autocal_status}")
   
    altitude = sensor.get_altitude_compensation()
    print(f"Altitude compensation was: {altitude}")
    
#    time.sleep(0.5)
#    sensor.set_altitude_compensation(435)
#    time.sleep(0.5)

#    altitude = sensor.get_altitude_compensation()
#    print(f"Altitude compensation now: {altitude}")
  
    ref_co_val = sensor.get_force_recalibration_status()
    print(f"Reference CO2-Value  : {ref_co_val}")
    
    temp_offset = sensor.get_temperature_offset()
    print(f"Temperature Offset : {temp_offset}")

    sensor.start_periodic_measurement(0)
    for i in range(30):
        try:
            time.sleep(1.5)
            (co2_concentration, temperature, humidity) = sensor.blocking_read_measurement_data()
            print(f"CO2: {co2_concentration:4.0f} ppm  Temp: {temperature:2.1f} Â°C  Humid: {humidity:2.0f} %")
        except BaseException:
            continue
    sensor.soft_reset()
